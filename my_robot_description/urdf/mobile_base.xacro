<?xml version = "1.0"?>
<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro"> 

    <xacro:include filename="$(find my_robot_description)/urdf/common_propertise.xacro" />
    
    <xacro:property name="base_length" value="0.6" />
    <xacro:property name="base_width" value="0.4" />
    <xacro:property name="base_height" value="0.2" />
    <xacro:property name="wheel_radius" value="0.1" />
    <xacro:property name="wheel_length" value="0.05" />

    <xacro:macro name="wheel_link" params="prefix">
        <link name="${prefix}_wheel_link">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
                <material name="gray" />
            </visual>
            <collision>
                <geometry>
                    <sphere radius="${wheel_radius}"/>
                </geometry>
                <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
            </collision>
            <xacro:cylinder_inertia m ="1.0" r="${wheel_radius}" l="${wheel_length}" o_xyz="0 0 0" o_rpy="${pi / 2.0} 0 0" />
        </link>
    </xacro:macro>
    <link name="base_footprint" />
    <joint name="base_joint" type="fixed">
        <parent link="base_footprint" />
        <child link="base_link" />
        <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0" />
    </joint>
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
            <origin xyz="0 0 ${base_height / 2}" rpy="0 0 0"/>
            <material name="green" />
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
            <origin xyz="0 0 ${base_height / 2}" rpy="0 0 0"/>
            <material name="green" />
        </collision>
        <xacro:box_inertia m="0.5" x="${base_length}" y="${base_width}" z="${base_height}" o_xyz="0 0 ${base_height / 2.0}" o_rpy="0 0 0" />
    </link>
    <link name="shoulder_link">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length * 2 }"/>
            </geometry>
            <origin xyz="0 0 ${base_height / 8}" rpy="0 0 0"/>
            <material name="gray"/>
        </visual>
        <xacro:cylinder_inertia m="1.0" r="${wheel_radius}" l="${wheel_length * 2}" o_xyz="0 0 ${base_height / 8}" o_rpy="0 0 0" />
    </link>
    <joint name="base_shoulder_joint" type="fixed">
        <parent link="base_link" />
        <child link="shoulder_link" />
        <origin xyz="0 0 ${base_height + 0.05}" rpy="0 0 0" />
    </joint>
    <!-- <xacro:name param1="value" param2="value" /> -->

    <xacro:wheel_link prefix="right" />

    <joint name="base_right_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="right_wheel_link" />
        <origin xyz="${-base_length / 4 } ${-(base_width + wheel_length ) / 2.0 } 0" rpy="0 0 0" />
        <axis xyz="0 1 0"/>
    </joint>

    <xacro:wheel_link prefix="left" />

    <joint name="base_left_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="left_wheel_link" />
        <origin xyz="${-base_length / 4 } ${(base_width + wheel_length ) / 2.0 } 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>
    <link name="caster_wheel">
        <visual>
            <geometry>
                <sphere radius="${wheel_radius /2 }"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="gray" />
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius /2 }"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <xacro:sphere_inertia m="0.5" r="${wheel_radius / 2}" o_xyz="0 0 0" o_rpy="0 0 0" />
    </link>
    <joint name="base_caster_joint" type="fixed">
        <parent link="base_link" />
        <child link="caster_wheel" />
        <origin xyz="${base_length /3} 0 ${-wheel_radius /2}" rpy="0 0 0" />
    </joint>
    <gazebo reference="caster_wheel_link">
        <mu1 value="0.1" />
        <mu2 value="0.1" />
    </gazebo>
    <link name="camera_link">
        <inertial>
            <mass value="0.20"/>
            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
        </inertial>
        <visual name="visual_camera_link"> 
            <geometry>
               <mesh filename="model://Intel_RealSense_D435/meshes/realsense.dae" />
            </geometry>
            <material name="">
                <color rgba="1.0 0.0 0.0 1.0"/>
                <texture filename=""/>
            </material>
        </visual>
        <collision> 
            <geometry>
                <mesh filename="model://Intel_RealSense_D435/meshes/realsense.dae" />
            </geometry>
        </collision>
    </link>
<joint name="camera_joint" type="fixed">
        <parent link="base_link" />
        <child link="camera_link" />
        <origin xyz="${base_length /3} 0 ${base_height}" rpy="0 0 0" />
    </joint>
    <gazebo>
        <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
            <left_joint>base_left_wheel_joint</left_joint>
            <right_joint>base_right_wheel_joint</right_joint>
            <odom_topic>odom</odom_topic>
            <frame_id>odom</frame_id>
            <odom_publisher_frequency>30</odom_publisher_frequency>
            <max_linear_acceleration>0.033</max_linear_acceleration>
            <child_frame_id>base_footprint</child_frame_id>
            <wheel_separation>0.45</wheel_separation>
            <wheel_radius>0.1</wheel_radius>
            <topic>cmd_vel</topic>
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>false</publish_wheel_tf>
        </plugin>


        <plugin filename="ignition-gazebo-odometry-publisher-system" name="ignition::gazebo::systems::OdometryPublisher">
            <odom_frame>odom</odom_frame>
            <odom_covariance_topic>odom</odom_covariance_topic>
            <tf_topic>tf</tf_topic>
            <robot_base_frame>base_footprint</robot_base_frame>
            <!-- <xyz_offset>-3.0 -2.0 0</xyz_offset> -->
            <!-- <odom_publish_frequency>100</odom_publish_frequency> -->
        </plugin>


    </gazebo>
    <gazebo>
        <plugin filename="gz-sim-joint-state-publisher-system" name="gz::sim::systems::JointStatePublisher">
        </plugin>
    </gazebo>

    <gazebo reference="shoulder_link">
        <sensor name="gpu_lidar" type="gpu_lidar">
            <update_rate>10</update_rate>
            <topic>scan</topic>
            <gz_frame_id>shoulder_link</gz_frame_id>
            <lidar>
                <scan>
                    <horizontal>
                        <samples>720</samples>
                        <!--(max_angle-min_angle)/samples * resolution -->
                        <resolution>1</resolution>
                        <min_angle>-3.14156</min_angle>
                        <max_angle>3.14156</max_angle>
                    </horizontal>
                    <!-- Dirty hack for fake lidar detections with ogre 1 rendering in VM -->
                    <!-- <vertical>
              <samples>3</samples>
              <min_angle>-0.001</min_angle>
              <max_angle>0.001</max_angle>
          </vertical> -->
                </scan>
                <range>
                    <min>0.05</min>
                    <max>10.0</max>
                    <resolution>0.01</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
                <frame_id>scan_link</frame_id>
            </lidar>
            <always_on>1</always_on>
            <visualize>true</visualize>
        </sensor>

    </gazebo>
<!-- Example for attaching a camera -->
<!-- <gazebo reference="camera_link">
  <sensor name="camera_sensor" type="camera">
    <camera>
      <horizontal_fov>1.047</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
      </image>
    </camera>
    <always_on>true</always_on>
    <update_rate>30</update_rate>
  </sensor>
</gazebo> -->
<gazebo reference="camera_link">
    <sensor name="rgb_camera" type="camera">
      <pose>0 0.0 0 0 0 0</pose>
      <camera>
        <horizontal_fov>1.367</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>200</far>
        </clip>
      </camera>
      <gz_frame_id>camera_link</gz_frame_id>
      <always_on>1</always_on>
      <update_rate>10</update_rate>
      <visualize>1</visualize>
      <topic>camera/image_raw/image</topic>
    </sensor>
  </gazebo>


    <gazebo reference="camera_link">
        <sensor name="depth" type="depth_camera">
            <pose>0.0089610933050383902 -0.0010701515703293301 1.2157785176357399 0 0 0</pose>
            <gz_frame_id>camera_link</gz_frame_id>
            <always_on>1</always_on>
            <update_rate>10</update_rate>
            <visualize>1</visualize>
            <topic>/camera/depth</topic>
            <camera>
                <horizontal_fov>1.48702</horizontal_fov>
                <image>
                    <width>1280</width>
                    <height>720</height>
                    <format>R_FLOAT32</format>
                </image>
                <clip>
                    <near>0.1</near>
                    <far>100</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <mean>0</mean>
                    <stddev>0.1</stddev>
                </noise>
            </camera>
        </sensor>
    </gazebo>

</robot>